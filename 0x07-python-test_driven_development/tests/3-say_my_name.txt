============================
How to use ``say_my_name()``
============================

``say_my_name`` is a function tha prints your names with a pre-text
"My name is in it"

STRINGS
========
``say_my_name()`` takes strings only otherwise raises a type error
::

	>>> say_my_name = __import__('3-say_my_name').say_my_name
	>>> say_my_name("John", "Smith")
	My name is John Smith

::

	>>> say_my_name("Walter", "White")
	My name is Walter White

When the second name is not providedn its automaically set to blank

::
	>>> say_my_name("Bob")
	My name is Bob 

NON STRINGS
===========
when other data types which are not strings are provided e.g numbers, lists etc the 
the fucntion raises a typeerror

::

	>>> say_my_name(12, "White")
	Traceback (most recent call last):
	TypeError: first_name must be a string

	>>> say_my_name("ELVIN", 5)
	Traceback (most recent call last):
	TypeError: last_name must be a string

When only numbers are passed to the function it raises the firsst type error
::

	>>> say_my_name(12, 12)
	Traceback (most recent call last):
    	TypeError: first_name must be a string

The function cannot be blank 
::

	>>> say_my_name()
	Traceback (most recent call last):
	TypeError: say_my_name() missing 1 required positional argument: 'first_name'

::

	>>> say_my_name([])
	Traceback (most recent call last):
        TypeError: first_name must be a string
